{"version":3,"sources":["GistsFilesStat.js","GistsStat.js","Note.js","Notes.js","NotesHeader.js","NoteForm.js","App.js","index.js"],"names":["require","now","Date","setSeconds","getSeconds","getTime","Note","note","onDelete","className","maxLength","type","value","title","placeholder","required","onClick","Notes","notes","map","id","NotesHeader","onSave","viewStats","useState","notesTitle","setNoteTitle","onSubmit","e","preventDefault","onChange","target","NoteForm","onAdd","setTitle","SetNote","App","localStorage","JSON","parse","setNotes","useEffect","setItem","stringify","key","Math","floor","random","length","console","log","Error","notes_filtered","files","forEach","index","requestOpts","method","cache","credentials","referrerPolicy","headers","body","fetch","then","response","json","filter","el","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26b18ec1.chunk.js","sourcesContent":["var Highcharts = require('highcharts'),\r\naddFunnel = require('highcharts/modules/funnel');\r\nvar gistsFileChart;\r\nvar now = new Date();\r\nvar filesEnd = now.setSeconds(now.getSeconds() - 5);;\r\nvar filesStart = new Date().getTime();;\r\nvar data = [];\r\nvar fileData = [];\r\n\r\nfunction loadGistsFilesData(start, end) {\r\n    const requestOpts = {\r\n        method: 'GET',\r\n        cache: 'no-cache', \r\n        credentials: 'same-origin',\r\n        referrerPolicy: 'no-referrer',\r\n        headers: {\r\n            'Accept': 'application/vnd.github.v3+json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    fetch('https://api.github.com/gists?per_page=100&since=' + (new Date(end)).toISOString(), requestOpts)\r\n      .then(response => {\r\n         const contentType = response.headers.get('content-type');\r\n         if (!contentType || !contentType.includes('application/json')) {\r\n           throw new TypeError(\"Invalid JSON\");\r\n         }\r\n         return response.json();\r\n      })\r\n      .then(gists => {\r\n        var filesCount = 0;\r\n        for (var i = 0; i < gists.length; i++) {\r\n            let createdAt = new Date(gists[i].created_at).getTime();\r\n            if (createdAt >= end && createdAt <= start && gists[i].files) {\r\n                filesCount += getGistsFileCount(gists[i]);\r\n            }\r\n        }\r\n        fileData.push({\r\n            x: start,\r\n            y: filesCount\r\n        });\r\n        renderGistsFilesChart(start, end, fileData);\r\n      })\r\n      .catch(error => console.error(error));\r\n}\r\n\r\nfunction getGistsFileCount(gist) {\r\n    let count = 0;\r\n    for (let i in gist.files) {\r\n        if (gist.files[i]) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\nfunction getGistsFiles() {\r\n    if (gistsFileChart) {\r\n        let dateObj = getNexStartEnd(filesStart, filesEnd);\r\n        filesStart = dateObj.start;\r\n        filesEnd = dateObj.end;\r\n    }\r\n    loadGistsFilesData(filesStart, filesEnd);\r\n}\r\n\r\nfunction renderGistsFilesChart(start, end, data) {\r\n    if (!gistsFileChart) {\r\n        gistsFileChart = Highcharts.chart('filesContainer', {\r\n            title: {\r\n                text: 'Files per Gist'\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Files per Gist'\r\n                }\r\n            },\r\n            xAxis: {\r\n                type : 'datetime',\r\n                dateTimeLabelFormats: {\r\n                    millisecond: ['%A, %b %e, %I:%M:%S %p', '%A, %b %e, %I:%M:%S %p', '-%I:%M:%S %p'],\r\n                    second: ['%A, %b %e, %I:%M:%S %p', '%A, %b %e, %I:%M:%S %p', '-%r'],\r\n                    minute: ['%A, %b %e, %I:%M %p', '%A, %b %e, %I:%M %p', '-%I:%M %p'],\r\n                    hour: ['%A, %b %e, %I:%M %p', '%A, %b %e, %I:%M %p', '-%I:%M %p'],\r\n                    day: ['%A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\r\n                    week: ['Week from %A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\r\n                    month: ['%b %Y', '%b', '-%b %Y'],\r\n                    year: ['%Y', '%Y', '-%Y']\r\n                }\r\n            },\r\n\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n\r\n            plotOptions: {\r\n            },\r\n\r\n            series: [{\r\n                name: 'Gists',\r\n                type: 'line',\r\n                data: data\r\n            }],\r\n\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 1024\r\n                    },\r\n                    chartOptions: {\r\n                        legend: {\r\n                            layout: 'horizontal',\r\n                            align: 'center',\r\n                            verticalAlign: 'bottom'\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n\r\n        });\r\n    } else {\r\n        gistsFileChart.series[0].setData(data);\r\n        gistsFileChart.reflow();\r\n    }\r\n}\r\n\r\nfunction getNexStartEnd(start, end) {\r\n    start = end;\r\n    end = new Date(end);\r\n    end = end.setSeconds(end.getSeconds() - 5);\r\n    return { start: start, end: end};\r\n}","var Highcharts = require('highcharts'),\r\naddFunnel = require('highcharts/modules/funnel');\r\nvar gistsChart;\r\nvar now = new Date();\r\nvar gistsEnd = now.setSeconds(now.getSeconds() - 5);\r\nvar gistsStart = new Date().getTime();\r\nvar data = [];\r\n\r\nfunction loadGistsData(start, end) {\r\n    const requestOpts = {\r\n        method: 'GET',\r\n        cache: 'no-cache', \r\n        credentials: 'same-origin',\r\n        referrerPolicy: 'no-referrer',\r\n        headers: {\r\n            'Accept': 'application/vnd.github.v3+json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    fetch('https://api.github.com/gists?per_page=100&since=' + (new Date(end)).toISOString(), requestOpts)\r\n      .then(response => {\r\n         const contentType = response.headers.get('content-type');\r\n         if (!contentType || !contentType.includes('application/json')) {\r\n           throw new TypeError(\"Invalid JSON\");\r\n         }\r\n         return response.json();\r\n      })\r\n      .then(gists => {\r\n        var count = 0;\r\n        for (var i = 0; i < gists.length; i++) {\r\n            let createdAt = new Date(gists[i].created_at).getTime();\r\n            if (createdAt >= end && createdAt <= start) {\r\n                count++;\r\n            }\r\n        }\r\n        data.push({\r\n            x: start,\r\n            y: count\r\n        });\r\n        renderGistsChart(start, end, data);\r\n      })\r\n      .catch(error => console.error(error));\r\n}\r\n\r\nfunction getGists() {\r\n    if (gistsChart) {\r\n        let dateObj = getNexStartEnd(gistsStart, gistsEnd);\r\n        gistsStart = dateObj.start;\r\n        gistsEnd = dateObj.end;\r\n    }\r\n    loadGistsData(gistsStart, gistsEnd);\r\n}\r\n\r\nfunction renderGistsChart(start, end, data) {\r\n    if (!gistsChart) {\r\n        gistsChart = Highcharts.chart('gistsContainer', {\r\n            title: {\r\n                text: 'Latest Gist Count'\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Count of Gits'\r\n                }\r\n            },\r\n            xAxis: {\r\n                type : 'datetime',\r\n                dateTimeLabelFormats: {\r\n                    millisecond: ['%A, %b %e, %I:%M:%S %p', '%A, %b %e, %I:%M:%S %p', '-%I:%M:%S %p'],\r\n                    second: ['%A, %b %e, %I:%M:%S %p', '%A, %b %e, %I:%M:%S %p', '-%r'],\r\n                    minute: ['%A, %b %e, %I:%M %p', '%A, %b %e, %I:%M %p', '-%I:%M %p'],\r\n                    hour: ['%A, %b %e, %I:%M %p', '%A, %b %e, %I:%M %p', '-%I:%M %p'],\r\n                    day: ['%A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\r\n                    week: ['Week from %A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\r\n                    month: ['%b %Y', '%b', '-%b %Y'],\r\n                    year: ['%Y', '%Y', '-%Y']\r\n                }\r\n            },\r\n\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n\r\n            series: [{\r\n                name: 'Gists',\r\n                type: 'line',\r\n                data: data\r\n            }],\r\n\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 1024\r\n                    },\r\n                    chartOptions: {\r\n                        legend: {\r\n                            layout: 'horizontal',\r\n                            align: 'center',\r\n                            verticalAlign: 'bottom'\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n\r\n        });\r\n    } else {\r\n        gistsChart.series[0].setData(data);\r\n        gistsChart.reflow();\r\n    }\r\n    \r\n}\r\n\r\nfunction getNexStartEnd(start, end) {\r\n    start = end;\r\n    end = new Date(end);\r\n    end = end.setSeconds(end.getSeconds() - 5);\r\n    return { start: start, end: end};\r\n}","function Note({note, onDelete}) {\r\n    return (\r\n        <div className=\"d-flex flex-column notes-cont\">\r\n            <div>\r\n                <input maxLength=\"255\" type=\"text\" value={note.title} placeholder=\"Enter note title...\" required/>\r\n                <button className=\"btn-red txt-white\" onClick={() => { onDelete(note); }}>Delete</button>\r\n            </div>\r\n            <div><textarea maxLength=\"1000\" value={note.note} placeholder=\"Enter note...\" required></textarea></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Note;","import Note from \"./Note\";\r\n\r\nfunction Notes({notes, onDelete}) {\r\n    if (!notes)\r\n        return <div></div>\r\n\r\n    return notes.map((note) => { return <Note key={note.id} note={note} onDelete={onDelete}/> })\r\n}\r\n\r\nexport default Notes;","import { useState } from \"react\";\r\n\r\nfunction NotesHeader({onSave, viewStats}) {\r\n    const [notesTitle, setNoteTitle] = useState(\"\");\r\n    return (\r\n        <form id=\"notepad_form\" className=\"d-flex\" onSubmit={(e) => {\r\n            e.preventDefault();\r\n            onSave(notesTitle)\r\n        }}>\r\n            <div className=\"form-col-9\">\r\n                <input maxLength=\"255\" type=\"text\" placeholder=\"My Notepad title...\"\r\n                 value={notesTitle} onChange={(e) => {setNoteTitle(e.target.value)}} required/>\r\n            </div>\r\n            <div className=\"form-col-3 flex-end\">\r\n                <button className=\"btn-white\" onClick={() => { viewStats() }}>View Stats</button>\r\n                <button className=\"btn-blue txt-white\" type=\"submit\">Save</button>\r\n                <button className=\"btn-red txt-white\">Delete</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NotesHeader;","import { useState } from \"react\";\r\n\r\nfunction NoteForm({onAdd}) {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [note, SetNote] = useState(\"\");\r\n    return (\r\n        <form id=\"notes_form\" className=\"d-flex flex-column\" onSubmit={(e) => {\r\n            e.preventDefault();\r\n            onAdd(title, note);\r\n            setTitle(\"\");\r\n            SetNote(\"\");\r\n        }}>\r\n            <h2>My notes</h2>\r\n            <input placeholder=\"Enter note title...\" required type=\"text\" value={title} onChange={(e) => {\r\n                setTitle(e.target.value);\r\n            }}/>\r\n            <textarea placeholder=\"Enter note...\" required value={note} onChange={(e) => {\r\n                SetNote(e.target.value);\r\n            }}>{note}</textarea>\r\n            <button className=\"btn-green txt-white\">Add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NoteForm;","import './App.css';\r\nimport Notes from './Notes';\r\nimport NotesHeader from \"./NotesHeader\";\r\nimport NoteForm from \"./NoteForm\";\r\nimport {useState, useEffect} from \"react\";\r\nimport \"./GistsFilesStat\";\r\nimport \"./GistsStat\";\r\n\r\nfunction App() {\r\n  const [notesTitle, setNotesTitle] = useState(\"\");\r\n\r\n  const [notes, setNotes] = useState(\r\n    localStorage.notes ? JSON.parse(localStorage.notes) : []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\r\n  }, [notes]);\r\n\r\n  var key = new Date().getTime() + (Math.floor(Math.random() * 100));\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <NotesHeader \r\n        onSave={(notesTitle) => {\r\n          if (!notes.length) {\r\n            return console.log(Error(\"At least one note should be added\"))\r\n          }\r\n\r\n          let notes_filtered = notes.map((note) => ({\"filename\": note.title, \"content\": note.note}));\r\n\r\n          let files = {};\r\n          notes_filtered.forEach(function(note, index) {\r\n              files[key + ''] = note;\r\n          });\r\n\r\n          const requestOpts = {\r\n            method: 'POST',\r\n            cache: 'no-cache', \r\n            credentials: 'same-origin',\r\n            referrerPolicy: 'no-referrer',\r\n            headers: {\r\n                'Accept': 'application/vnd.github.v3+json',\r\n                'Authorization': 'token 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',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"description\": notesTitle, \"public\": true, \"files\": files})\r\n          };\r\n\r\n          fetch(\"https://api.github.com/gists\", requestOpts)\r\n            .then((response) => {\r\n              return response.json()\r\n            })\r\n            .then((response) => {debugger;})\r\n        }}\r\n        viewStats={() => {\r\n        //  getGists();\r\n        //  getGistsFiles();\r\n        }}\r\n        />\r\n      <NoteForm onAdd={(title, note) => {\r\n          setNotes([\r\n            ...notes,\r\n            {\r\n              id: key,\r\n              title: title,\r\n              note: note\r\n            }\r\n          ])\r\n      }}/>\r\n      <Notes notes={notes} \r\n        onDelete={(note) => {setNotes(notes.filter((el) => el.id != note.id))}}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}